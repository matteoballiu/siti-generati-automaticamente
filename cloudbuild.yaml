# Aggiungi questa riga in cima, sotto serviceAccount
serviceAccount: projects/sito-automazione-aziende/serviceAccounts/358125195620@cloudbuild.gserviceaccount.com
logsBucket: gs://e-figo/cloud-build-logs/ # NUOVA RIGA: Specifica dove archiviare i log del build

steps:
# Step 1: Configura l'ambiente Python e installa le dipendenze
- name: 'gcr.io/cloud-builders/python'
  id: Install-Dependencies
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      pip install --user -r requirements.txt
      pip install --user google-cloud-storage # Assicurati sia installato
  env:
    - 'PYTHONUSERBASE=/usr/local'

# Step 2: Ottieni i segreti da Secret Manager e li imposta come variabili d'ambiente
- name: 'gcr.io/cloud-builders/gcloud'
  id: Set-Secrets
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      export OPENAI_API_KEY=$(gcloud secrets versions access latest --secret=OPENAI_API_KEY --project=${PROJECT_ID})
      export PEXELS_API_KEY=$(gcloud secrets versions access latest --secret=PEXELS_API_KEY --project=${PROJECT_ID})
      export IMAP_USER=$(gcloud secrets versions access latest --secret=IMAP_USER --project=${PROJECT_ID})
      export IMAP_PASSWORD=$(gcloud secrets versions access latest --secret=IMAP_PASSWORD --project=${PROJECT_ID})
      export IMAP_HOST=$(gcloud secrets versions access latest --secret=IMAP_HOST --project=${PROJECT_ID})
      
      echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> /tmp/env.txt
      echo "PEXELS_API_KEY=$PEXELS_API_KEY" >> /tmp/env.txt
      echo "IMAP_USER=$IMAP_USER" >> /tmp/env.txt
      echo "IMAP_PASSWORD=$IMAP_PASSWORD" >> /tmp/env.txt
      echo "IMAP_HOST=$IMAP_HOST" >> /tmp/env.txt
  secretEnv: ['OPENAI_API_KEY', 'PEXELS_API_KEY', 'IMAP_USER', 'IMAP_PASSWORD', 'IMAP_HOST']

# Step 3: Esegui lo script di generazione del sito
- name: 'gcr.io/cloud-builders/python'
  id: Generate-Website
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -a; source /tmp/env.txt; set +a
      
      gsutil cp gs://${_INPUT_BUCKET_NAME}/${_INPUT_FILE_NAME} ./input_email.json
      
      # Nota: L'API FastAPI (main.py) deve essere deployata su Cloud Run o un servizio accessibile.
      # Se la tua API_BASE_URL nel run_automation.py punta ancora a http://127.0.0.1:8000,
      # questo build fallir√† a meno che tu non abbia un'istanza di FastAPI pubblica.
      # Per test completi, ti consiglio di deployare FastAPI su Cloud Run.
      
      echo "Eseguo run_automation.py con input_email.json..."
      python run_automation.py ./input_email.json
  env:
    - 'PYTHONUSERBASE=/usr/local'

# Step 4: Carica i file generati sul bucket di hosting statico
- name: 'gcr.io/cloud-builders/gsutil'
  id: Upload-Website
  args: ['-m', 'cp', '-r', './public/*', 'gs://${_HOSTING_BUCKET_NAME}/']

# Step 5: Pulisci i file JSON di input dal bucket dopo l'elaborazione (Opzionale ma buona pratica)
- name: 'gcr.io/cloud-builders/gsutil'
  id: Clean-Input-File
  args: ['rm', 'gs://${_INPUT_BUCKET_NAME}/${_INPUT_FILE_NAME}']
  waitFor: ["Upload-Website"]
