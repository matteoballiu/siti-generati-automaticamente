# Questo è il file cloudbuild.yaml COMPLETO e CORRETTO, con la gestione dei segreti tramite availableSecrets.

serviceAccount: projects/generatore-siti-nuovo/serviceAccounts/138602713462@cloudbuild.gserviceaccount.com
logsBucket: gs://sito-automazione-build-logs-138602713462/ # Specifica dove archiviare i log del build

# availableSecrets deve essere al LIVELLO TOP del file YAML
availableSecrets:
  secretManager:
  - versionName: projects/generatore-siti-nuovo/secrets/OPENAI_API_KEY/versions/latest
    env: 'OPENAI_API_KEY' # Questo è il NOME della variabile d'ambiente
  - versionName: projects/generatore-siti-nuovo/secrets/PEXELS_API_KEY/versions/latest
    env: 'PEXELS_API_KEY'
  - versionName: projects/generatore-siti-nuovo/secrets/IMAP_USER/versions/latest
    env: 'IMAP_USER'
  - versionName: projects/generatore-siti-nuovo/secrets/IMAP_PASSWORD/versions/latest
    env: 'IMAP_PASSWORD'
  - versionName: projects/generatore-siti-nuovo/secrets/IMAP_HOST/versions/latest
    env: 'IMAP_HOST'
  # Se il tuo repository GitHub è privato e hai un GITHUB_TOKEN, lo aggiungeresti qui:
  #- versionName: projects/generatore-siti-nuovo/secrets/GITHUB_TOKEN/versions/latest
  #  env: 'GITHUB_TOKEN'

steps:
# STEP 0: Clonare il repository GitHub
# Questo è necessario perché i trigger Pub/Sub non clonano automaticamente il codice.
- name: 'gcr.io/cloud-builders/git'
  id: Clone-Repository
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Se il repository è privato, usa l'autenticazione con un token GitHub (se configurato in availableSecrets)
      # Esempio per repo privato: git clone https://oauth2:$(GITHUB_TOKEN)@github.com/matteoballiu/siti-generati-automaticamente.git .
      # NOTA: Se il tuo repository è privato, dovrai creare un segreto GITHUB_TOKEN in Secret Manager
      # e configurarlo in 'availableSecrets' e 'secretEnv' per questo step.
      #
      # Per repository pubblici:
      git clone --depth=1 https://github.com/matteoballiu/siti-generati-automaticamente .
  # Se il tuo repository GitHub è privato, il token deve essere iniettato come variabile d'ambiente qui.
  # Ad esempio: secretEnv: ['GITHUB_TOKEN']
  # E GITHUB_TOKEN deve essere definito in availableSecrets al top level.

# Step 1: Configura l'ambiente Python e installa le dipendenze
- name: 'gcr.io/cloud-builders/python'
  id: Install-Dependencies
  entrypoint: 'bash'
  args: ['-c', 'pip install --user -r requirements.txt && pip install --user google-cloud-storage']
  env:
    - 'PYTHONUSERBASE=/usr/local'

# Step 2: Esegui lo script di generazione del sito, iniettando i segreti come variabili d'ambiente
- name: 'gcr.io/cloud-builders/python'
  id: Generate-Website
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Scarica il file JSON dell'email dal bucket di input
      gsutil cp gs://${_INPUT_BUCKET_NAME}/${_INPUT_FILE_NAME} ./input_email.json
      
      echo "Eseguo run_automation.py con input_email.json..."
      python run_automation.py ./input_email.json
  env:
    - 'PYTHONUSERBASE=/usr/local'
    # Rimuovi le definizioni KEY=VALUE qui. Le variabili saranno iniettate tramite secretEnv.
    # Non usare la sintassi '${VAR_NAME}' qui.
  # CORREZIONE: Aggiungi il blocco secretEnv a questo step, listando i NOMI delle variabili d'ambiente.
  secretEnv:
    - 'OPENAI_API_KEY' # Nome della variabile d'ambiente che Python leggerà (corrisponde a env in availableSecrets)
    - 'PEXELS_API_KEY'
    - 'IMAP_USER'
    - 'IMAP_PASSWORD'
    - 'IMAP_HOST'


# Step 3: Carica i file generati sul bucket di hosting statico (ex Step 4)
- name: 'gcr.io/cloud-builders/gsutil'
  id: Upload-Website
  args: ['-m', 'cp', '-r', './public/*', 'gs://${_HOSTING_BUCKET_NAME}/']

# Step 4: Pulisci i file JSON di input dal bucket dopo l'elaborazione (ex Step 5)
- name: 'gcr.io/cloud-builders/gsutil'
  id: Clean-Input-File
  args: ['rm', 'gs://${_INPUT_BUCKET_NAME}/${_INPUT_FILE_NAME}']
  waitFor: ["Upload-Website"]

timeout: 1800s # Aumenta il timeout a 30 minuti (1800 secondi) se le generazioni AI sono lunghe